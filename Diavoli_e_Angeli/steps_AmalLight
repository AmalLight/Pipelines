
# --------------------------------------------------------/etc/hostname

dns-kaumi

# --------------------------------------------------------/etc/hosts

127.0.0.1  localhost
127.0.0.1  dns-kaumi

# --------------------------------------------------------/etc/dnsmasq.conf

# My Settings
port=53
# no-poll
# no-resolv
# no-hosts
interface=enp1s0
listen-address=127.0.0.1
listen-address=192.168.31.1

# For Proxy
resolv-file=/etc/resolv.conf
# ignoring nameserver 127.0.0.1 - local interface ( prevent infinite loop )
# local=/samael.proxy.ka/             # for have a slowly /etc/hosts composing
address=/proxy.ka/192.168.31.2        # for have a faster /etc/hosts composing
address=/samael.proxy.ka/192.168.31.2 # for have a faster /etc/hosts composing
address=/crown.proxy.ka/192.168.31.2  # for have a faster /etc/hosts composing

# DHCP Range
dhcp-range=192.168.31.2,192.168.31.12,255.255.255.0,24h

# DHCP Option
# 3 router
# 6 dns-server
dhcp-option=3,192.168.31.1
dhcp-option=6,8.8.8.8,8.8.4.4

# --------------------------------------------------------/etc/resolvconf/resolv.conf.d/head

nameserver 192.168.31.1
nameserver 8.8.8.8
nameserver 8.8.4.4

# --------------------------------------------------------/etc/resolvconf/resolv.conf.d/tail

DNSStubListener=no # product on /etc/resolv.conf

~$ sudo resolvconf --enable-updates
   sudo resolvconf  -u
   sudo systemctl restart resolvconf.service
   sudo systemctl restart    dnsmasq.service
   # sudo systemctl status resolvconf.service
   # sudo systemctl status dnsmasq.service

# --------------------------------------------------------

~$ sudo apt install tshark wireshark -y   # ssh -X 192.168.31.1 wireshark
   sudo dpkg-reconfigure wireshark-common # ssh -X 192.168.31.1 wireshark
   sudo usermod -a -G wireshark kaumi     # ssh -X 192.168.31.1 wireshark
   
   # example for Android:
     - tshark -i enp1s0 -Y 'ip.src==192.168.31.6 and \
                            udp.port==53 and \
                            dns.qry.name contains "whatsapp"'
   
   sudo apt install iptables-persistent
   git clone https://github.com/AmalLight/AzureKubernetes.git

# --------------------------------------------------------/etc/sysctl.conf

# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1

# Do not accept ICMP redirects (prevent MITM attacks)
#net.ipv4.conf.all.accept_redirects = 0
#net.ipv6.conf.all.accept_redirects = 0

# Accept ICMP redirects only for gateways listed in our default
# gateway list (enabled by default)
# net.ipv4.conf.all.secure_redirects = 1

# Do not send ICMP redirects (we are not a router)
#net.ipv4.conf.all.send_redirects = 0

# Do not accept IP source route packets (we are not a router)
#net.ipv4.conf.all.accept_source_route = 0
#net.ipv6.conf.all.accept_source_route = 0

# --------------------------------------------------------

# MASQUERADE = mask/overwrite ip src and all packet for good forwarding
# Permit all internet request from ethernet to wifi
# FORWARD = filters incoming packets that will be forwarded somewhere else
#           ( only if they were already RELATED,ESTABLISHED ( requested ) )

# -------------------------------------------------------- + LOAD

    sudo sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
    # sudo sh -c "iptables-save > /etc/iptables/rules.v4"

    sudo sh -c "echo *nat                                      > /etc/iptables/rules.v4"
    sudo sh -c "echo -X                                       >> /etc/iptables/rules.v4"
    sudo sh -c "echo -F                                       >> /etc/iptables/rules.v4"
    sudo sh -c "echo '-A POSTROUTING -o wlan0  -j MASQUERADE' >> /etc/iptables/rules.v4"
    sudo sh -c "echo COMMIT                                   >> /etc/iptables/rules.v4"
    sudo sh -c "echo *mangle                                  >> /etc/iptables/rules.v4"
    sudo sh -c "echo -X                                       >> /etc/iptables/rules.v4"
    sudo sh -c "echo -F                                       >> /etc/iptables/rules.v4"
    sudo sh -c "echo COMMIT                                   >> /etc/iptables/rules.v4"
    sudo sh -c "echo *filter                                  >> /etc/iptables/rules.v4"
    sudo sh -c "echo -X                                       >> /etc/iptables/rules.v4"
    sudo sh -c "echo -F                                       >> /etc/iptables/rules.v4"

#   -------------------------------------------------------- * ACCEPT FOR TSHARK
        
    sudo sh -c "echo '-A INPUT   -i lo  -j ACCEPT'  >>  /etc/iptables/rules.v4"
    sudo sh -c "echo '-A OUTPUT  -o lo  -j ACCEPT'  >>  /etc/iptables/rules.v4"

#   -------------------------------------------------------- === PROTECT ROUTER

    #   -------------------------------------------------------- OUTPUT : HTTP & HTTPS & DHCP/DNS & ICMP

        sudo sh -c "echo '-A OUTPUT   -o wlan0  -s  172.20.10.0/28  -p tcp                      --dport  22         -j DROP'    >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A OUTPUT   -o wlan0  -s  172.20.10.0/28  -p tcp   --match multiport  --dports 80,443     -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A OUTPUT   -o wlan0  -s  172.20.10.0/28  -p udp                      --dport  53         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A OUTPUT   -o wlan0  -s  172.20.10.0/28  -p icmp                                         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        
    #   -------------------------------------------------------- INPUT  : HTTP & HTTPS & DHCP/DNS & ICMP
    
        sudo sh -c "echo '-A INPUT    -i wlan0  -d  172.20.10.0/28  -p tcp                      --sport  22         -j DROP'    >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A INPUT    -i wlan0  -d  172.20.10.0/28  -p tcp   --match multiport  --sports 80,443     -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A INPUT    -i wlan0  -d  172.20.10.0/28  -p udp                      --sport  53         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A INPUT    -i wlan0  -d  172.20.10.0/28  -p icmp                                         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        
#   -------------------------------------------------------- === INSIDE NETWORK == with dst DIFFERENT to ROUTER, Inside is managed by fritz !!

        # NEED this inside only for first connection to dnsmasq
        
        sudo sh -c "echo '-A INPUT    -i enp1s0                    -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A OUTPUT   -o enp1s0  -s  192.168.31.1  -j ACCEPT'  >>  /etc/iptables/rules.v4"

    #   -------------------------------------------------------- ACCEPT FORWARD === INPUT  : HTTP & HTTPS & GIT (22) & ICMP & DHCP/DNS => GO OUTSIDE
        
        sudo sh -c "echo '-A FORWARD  -i enp1s0 -o  wlan0  -p tcp  --match multiport  --dports  80,443,22  -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A FORWARD  -i enp1s0 -o  wlan0  -p udp                     --dport   53         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A FORWARD  -i enp1s0 -o  wlan0  -p icmp                                         -j ACCEPT'  >>  /etc/iptables/rules.v4"

    #   -------------------------------------------------------- ACCEPT FORWARD === OUTPUT : HTTP & HTTPS & GIT (22) & ICMP & DHCP/DNS => GO OUTSIDE

        sudo sh -c "echo '-A FORWARD  -i wlan0  -o enp1s0  -p tcp  --match multiport  --sports  80,443,22  -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A FORWARD  -i wlan0  -o enp1s0  -p udp                     --sport   53         -j ACCEPT'  >>  /etc/iptables/rules.v4"
        sudo sh -c "echo '-A FORWARD  -i wlan0  -o enp1s0  -p icmp                                         -j ACCEPT'  >>  /etc/iptables/rules.v4"

#   -------------------------------------------------------- * DROP ALL
   
    sudo sh -c "echo '-A INPUT   -j  DROP'  >>  /etc/iptables/rules.v4"
    sudo sh -c "echo '-A FORWARD -j  DROP'  >>  /etc/iptables/rules.v4"
    sudo sh -c "echo '-A OUTPUT  -j  DROP'  >>  /etc/iptables/rules.v4"

# -------------------------------------------------------- + SAVE
    
    sudo sh -c "echo COMMIT       >> /etc/iptables/rules.v4"
    sudo sh -c "iptables-restore   < /etc/iptables/rules.v4"

    # 6667 txt irc , source 1024:5000 range for xdcc-socket(s)=(fork,thread to work on bytes)

# -------------------------------------------------------- OTHER

~$ echo "sudo  cat /etc/iptables/rules.v4 ; \
   sudo iptables -t filter -L -v
   sudo iptables -t nat    -L -v ; \
   sudo iptables -t mangle -L -v "  >  /home/kaumi/check.sh

   echo  "sudo  bleachbit --preset -c && bleachbit --preset -c"       >  /home/kaumi/end.sh
   echo  "sudo  /sbin/shutdown now"                                   >  /home/kaumi/stop.sh
   echo  "sudo  /sbin/reboot"                                         >  /home/kaumi/restart.sh
   echo  'cd /home/kaumi/Shark/ ; sudo bash tshark.run.sh enp1s0 $@'  >  /home/kaumi/Shark/watch_enp1s0.sh
   echo  'cd /home/kaumi/Shark/ ; sudo bash tshark.run.sh  wlan0 $@'  >  /home/kaumi/Shark/watch_wlan0.sh
   echo  'sudo sh -c "iptables-restore < /etc/iptables/rules.v4"'     >  /home/kaumi/reset.sh

   echo  'sudo apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false update' > /home/kaumi/update.sh
